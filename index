<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ひらがなタイピングゲーム</title>
    <link rel="icon" href="favicon.ico" type="image/x-icon">
    <style>
        body {
            background-color: #121212;
            color: #ffffff;
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
        }
        #question {
            font-size: 2rem;
            margin-bottom: 1rem;
            visibility: hidden;
        }
        #input-area {
            margin-top: 1rem;
        }
        input[type="text"] {
            font-size: 1.5rem;
            padding: 0.5rem;
            width: 300px;
        }
        button {
            font-size: 1.2rem;
            padding: 0.5rem 1rem;
            margin-left: 1rem;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>ひらがなタイピングゲーム</h1>
    <div id="question"></div>
    <div id="input-area">
        <input type="text" id="answer" placeholder="ここに入力してください" disabled>
        <button id="check-button" disabled>判定</button>
    </div>

    <script>
        const hiragana = "あいうえおかきくけこさしすせそたちつてとなにぬねのはひふへほまみむめもやゆよらりるれろわをん";
        let currentQuestion = "";
        let currentLevel = 1;
        const questionElement = document.getElementById("question");
        const answerInput = document.getElementById("answer");
        const checkButton = document.getElementById("check-button");

        function getRandomHiragana(length) {
            let result = "";
            for (let i = 0; i < length; i++) {
                const randomIndex = Math.floor(Math.random() * hiragana.length);
                result += hiragana[randomIndex];
            }
            return result;
        }

        function showQuestion() {
            currentQuestion = getRandomHiragana(currentLevel);
            questionElement.textContent = currentQuestion;
            questionElement.style.visibility = "visible";
            answerInput.disabled = true;
            checkButton.disabled = true;

            const displayTime = Math.floor(Math.sqrt(currentQuestion.length)) * 1000;
            setTimeout(() => {
                questionElement.style.visibility = "hidden";
                answerInput.disabled = false;
                checkButton.disabled = false;
                answerInput.focus();
            }, displayTime);
        }

        function resetGame() {
            currentLevel = 1;
            showQuestion();
        }

        function nextLevel() {
            currentLevel++;
            showQuestion();
        }

        function checkAnswer() {
            const inputValue = answerInput.value;
            if (inputValue === currentQuestion) {
                answerInput.value = "";
                nextLevel();
            } else {
                answerInput.value = "";
                resetGame();
            }
        }

        checkButton.addEventListener("click", checkAnswer);

        answerInput.addEventListener("keypress", (event) => {
            if (event.key === "Enter") {
                checkAnswer();
            }
        });

        // 初期問題の表示
        showQuestion();
    </script>
</body>
</html>
